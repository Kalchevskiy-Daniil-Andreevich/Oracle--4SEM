--1
SELECT * FROM V$SGA;

--2
SELECT * FROM V$PARAMETER;

--3
SELECT * FROM V$CONTROLFILE;

--4
ALTER SESSION SET CONTAINER = CDB$ROOT;

CREATE PFILE = 'potlex.ora' FROM SPFILE;
SHOW PARAMETER potlex.ora;

ALTER SESSION SET CONTAINER = PDB_KDA;

--5
CREATE TABLE INFO_PERSON(
    ID_PERSON NUMBER NOT NULL PRIMARY KEY,
    NAME_PERSON NVARCHAR2(50) NOT NULL
);

SELECT * FROM DBA_SEGMENTS;

INSERT INTO INFO_PERSON VALUES(1, 'Макар');
INSERT INTO INFO_PERSON VALUES(2, 'Егор');
INSERT INTO INFO_PERSON VALUES(3, 'Алина');
INSERT INTO INFO_PERSON VALUES(4, 'Владимир');
INSERT INTO INFO_PERSON VALUES(5, 'Даниил');

SELECT * FROM INFO_PERSON;

SELECT EXTENTS, BYTES, BLOCKS
FROM USER_SEGMENTS
WHERE SEGMENT_NAME = 'INFO_PERSON';

--6
SELECT * FROM V$PROCESS;
SELECT * FROM V$BGPROCESS;
SELECT * FROM V$SESSION WHERE TYPE ='BACKGROUND';

--7
SELECT * FROM DBA_TABLESPACES;
SELECT * FROM DBA_DATA_FILES;

--8
SELECT * FROM DBA_ROLES;

--9
SELECT * FROM DBA_TAB_PRIVS WHERE GRANTEE = 'SYS';

--10
SELECT * FROM DBA_USERS;

--11
CREATE ROLE MAGA;

--12
CREATE USER MAGAS IDENTIFIED BY 123456789;

--13,14
SELECT * FROM DBA_PROFILES;

--15
CREATE PROFILE PROFILE_MAGI LIMIT
PASSWORD_LIFE_TIME 180;

--16
CREATE SEQUENCE S1
START WITH 1000
INCREMENT BY 10
MINVALUE 0
MAXVALUE 10000
CYCLE
CACHE 30
ORDER;

CREATE TABLE T1(
    ID_T1 NUMBER,
    STASH_T1 NUMBER,
    AGE_T1 NUMBER
);

INSERT INTO T1(ID_T1, STASH_T1, AGE_T1) VALUES(S1.NEXTVAL, S1.NEXTVAL, S1.NEXTVAL);

SELECT * FROM T1;

--17
CREATE SYNONYM TABL FOR T1;
CREATE PUBLIC SYNONYM TABLPUBLIC FOR T1;

SELECT * FROM DBA_SYNONYMS WHERE SYNONYM_NAME = 'TABL';
SELECT * FROM DBA_SYNONYMS WHERE SYNONYM_NAME = 'TABLPUBLIC';

--18


--19
SELECT * FROM V$LOGFILE;

--20
SELECT * FROM V$LOG WHERE STATUS = 'CURRENT';

--21
SELECT * FROM V$CONTROLFILE;

--22
CREATE TABLE T10(
    ID NUMBER
);

BEGIN
    FOR COUNTER IN 1..100
    LOOP
        INSERT INTO T10 VALUES(COUNTER);
    END LOOP;
END;

SELECT * FROM T10;

SELECT * FROM USER_OBJECTS WHERE OBJECT_NAME = 'T10';

--23
SELECT * FROM DBA_SEGMENTS;

--24
SELECT * FROM USER_OBJECTS;

--25
SELECT table_name, blocks
FROM user_tables
WHERE table_name = 'T1';

SELECT BLOCKS
FROM DBA_SEGMENTS
WHERE SEGMENT_NAME = 'T1'

--26
SELECT * FROM V$SESSION;

--27
SELECT LOG_MODE FROM V$DATABASE;

--28
CREATE FORCE VIEW FOFT1
AS
SELECT * FROM T1 WITH CHECK OPTION;

--29
CREATE DATABASE LINK TABLE_T1
CONNECT TO SYS
IDENTIFIED BY LexaDanik510
USING 'MAGA'

DROP DATABASE LINK TABLE_T1;

--30
DECLARE
  v_num1 NUMBER := 10;
  v_num2 NUMBER := 0;
  v_result NUMBER;
BEGIN
  BEGIN
    -- Попыт деления на ноль
    v_result := v_num1 / v_num2;
  EXCEPTION
    WHEN ZERO_DIVIDE THEN
      -- Обработка исключения
      DBMS_OUTPUT.PUT_LINE('Ошибка: дел на ноль');
      RAISE;
  END;
END;

---
---  CREATE TABLE statements for Oracle
---

DROP TABLE ORDERS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;
DROP TABLE SALESREPS CASCADE CONSTRAINTS;
DROP TABLE OFFICES CASCADE CONSTRAINTS;
DROP TABLE PRODUCTS CASCADE CONSTRAINTS;


CREATE TABLE PRODUCTS
     (MFR_ID CHAR(3) NOT NULL,
  PRODUCT_ID CHAR(5) NOT NULL,
 DESCRIPTION VARCHAR(20) NOT NULL,
       PRICE DECIMAL(9,2) NOT NULL,
 QTY_ON_HAND INTEGER NOT NULL,
 PRIMARY KEY (MFR_ID, PRODUCT_ID));


CREATE TABLE OFFICES
     (OFFICE INTEGER NOT NULL,
        CITY VARCHAR(15) NOT NULL,
      REGION VARCHAR(10) NOT NULL,
         MGR INTEGER,
      TARGET DECIMAL(9,2),
       SALES DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (OFFICE));


CREATE TABLE SALESREPS
   (EMPL_NUM INTEGER NOT NULL,
             CHECK (EMPL_NUM BETWEEN 101 AND 199),
        NAME VARCHAR(15) NOT NULL,
         AGE INTEGER,
  REP_OFFICE INTEGER,
       TITLE VARCHAR(10),
   HIRE_DATE DATE NOT NULL,
     MANAGER INTEGER,
       QUOTA DECIMAL(9,2),
       SALES DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (EMPL_NUM),
 FOREIGN KEY (MANAGER)
  REFERENCES SALESREPS(EMPL_NUM)
  ON DELETE SET NULL,
 CONSTRAINT WORKSIN FOREIGN KEY (REP_OFFICE)  
  REFERENCES OFFICES(OFFICE)
  ON DELETE SET NULL);


CREATE TABLE CUSTOMERS
   (CUST_NUM INTEGER    NOT NULL,
    COMPANY  VARCHAR(20) NOT NULL,
    CUST_REP INTEGER,
    CREDIT_LIMIT DECIMAL(9,2),
 PRIMARY KEY (CUST_NUM),
 CONSTRAINT HASREP FOREIGN KEY (CUST_REP)
  REFERENCES SALESREPS(EMPL_NUM)
   ON DELETE SET NULL);


CREATE TABLE ORDERS
  (ORDER_NUM INTEGER NOT NULL,
             CHECK (ORDER_NUM > 100000),
  ORDER_DATE DATE NOT NULL,
        CUST INTEGER NOT NULL,
         REP INTEGER,
         MFR CHAR(3) NOT NULL,
     PRODUCT CHAR(5) NOT NULL,
         QTY INTEGER NOT NULL,
      AMOUNT DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (ORDER_NUM),
 CONSTRAINT PLACEDBY FOREIGN KEY (CUST)
  REFERENCES CUSTOMERS(CUST_NUM)
   ON DELETE CASCADE,
 CONSTRAINT TAKENBY FOREIGN KEY (REP)
  REFERENCES SALESREPS(EMPL_NUM)
   ON DELETE SET NULL,
 CONSTRAINT ISFOR FOREIGN KEY (MFR, PRODUCT)
  REFERENCES PRODUCTS(MFR_ID, PRODUCT_ID));


ALTER TABLE OFFICES
  ADD CONSTRAINT HASMGR
  FOREIGN KEY (MGR) REFERENCES SALESREPS(EMPL_NUM)
  ON DELETE SET NULL;

---
---  Inserts for sample schema, tailored for Oracle
---

alter session set NLS_DATE_FORMAT='YYYY-MM-DD';
set escape on

delete from orders;
delete from customers;
update offices set mgr=null;
delete from salesreps;
delete from offices;
delete from products;
commit;

---
---  PRODUCTS
---
INSERT INTO PRODUCTS VALUES('REI','2A45C','Ratchet Link',79.00,210);
INSERT INTO PRODUCTS VALUES('ACI','4100Y','Widget Remover',2750.00,25);
INSERT INTO PRODUCTS VALUES('QSA','XK47 ','Reducer',355.00,38);
INSERT INTO PRODUCTS VALUES('BIC','41627','Plate',180.00,0);
INSERT INTO PRODUCTS VALUES('IMM','779C ','900-LB Brace',1875.00,9);
INSERT INTO PRODUCTS VALUES('ACI','41003','Size 3 Widget',107.00,207);
INSERT INTO PRODUCTS VALUES('ACI','41004','Size 4 Widget',117.00,139);
INSERT INTO PRODUCTS VALUES('BIC','41003','Handle',652.00,3);
INSERT INTO PRODUCTS VALUES('IMM','887P ','Brace Pin',250.00,24);
INSERT INTO PRODUCTS VALUES('QSA','XK48 ','Reducer',134.00,203);
INSERT INTO PRODUCTS VALUES('REI','2A44L','Left Hinge',4500.00,12);
INSERT INTO PRODUCTS VALUES('FEA','112  ','Housing',148.00,115);
INSERT INTO PRODUCTS VALUES('IMM','887H ','Brace Holder',54.00,223);
INSERT INTO PRODUCTS VALUES('BIC','41089','Retainer',225.00,78);
INSERT INTO PRODUCTS VALUES('ACI','41001','Size 1 Wiget',55.00,277);
INSERT INTO PRODUCTS VALUES('IMM','775C ','500-lb Brace',1425.00,5);
INSERT INTO PRODUCTS VALUES('ACI','4100Z','Widget Installer',2500.00,28);
INSERT INTO PRODUCTS VALUES('QSA','XK48A','Reducer',177.00,37);
INSERT INTO PRODUCTS VALUES('ACI','41002','Size 2 Widget',76.00,167);
INSERT INTO PRODUCTS VALUES('REI','2A44R','Right Hinge',4500.00,12);
INSERT INTO PRODUCTS VALUES('IMM','773C ','300-lb Brace',975.00,28);
INSERT INTO PRODUCTS VALUES('ACI','4100X','Widget Adjuster',25.00,37);
INSERT INTO PRODUCTS VALUES('FEA','114  ','Motor Mount',243.00,15);
INSERT INTO PRODUCTS VALUES('IMM','887X ','Brace Retainer',475.00,32);
INSERT INTO PRODUCTS VALUES('REI','2A44G','Hinge Pin',350.00,14);
commit;

---
---  OFFICES
---
INSERT INTO OFFICES VALUES(22,'Denver','Western',null,300000.00,186042.00);
INSERT INTO OFFICES VALUES(11,'New York','Eastern',null,575000.00,692637.00);
INSERT INTO OFFICES VALUES(12,'Chicago','Eastern',null,800000.00,735042.00);
INSERT INTO OFFICES VALUES(13,'Atlanta','Eastern',null,350000.00,367911.00);
INSERT INTO OFFICES VALUES(21,'Los Angeles','Western',null,725000.00,835915.00);
commit;

---
---  SALESREPS
---
INSERT INTO SALESREPS VALUES (106,'Sam Clark',52,11,'VP Sales','2006-06-14',null,275000.00,299912.00);
INSERT INTO SALESREPS VALUES (109,'Mary Jones',31,11,'Sales Rep','2007-10-12',106,300000.00,392725.00);
INSERT INTO SALESREPS VALUES (104,'Bob Smith',33,12,'Sales Mgr','2005-05-19',106,200000.00,142594.00);
INSERT INTO SALESREPS VALUES (108,'Larry Fitch',62,21,'Sales Mgr','2007-10-12',106,350000.00,361865.00);
INSERT INTO SALESREPS VALUES (105,'Bill Adams',37,13,'Sales Rep','2006-02-12',104,350000.00,367911.00);
INSERT INTO SALESREPS VALUES (102,'Sue Smith',48,21,'Sales Rep','2004-12-10',108,350000.00,474050.00);
INSERT INTO SALESREPS VALUES (101,'Dan Roberts',45,12,'Sales Rep','2004-10-20',104,300000.00,305673.00);
INSERT INTO SALESREPS VALUES (110,'Tom Snyder',41,null,'Sales Rep','2008-01-13',101,null,75985.00);
INSERT INTO SALESREPS VALUES (103,'Paul Cruz',29,12,'Sales Rep','2005-03-01',104,275000.00,286775.00);
INSERT INTO SALESREPS VALUES (107,'Nancy Angelli',49,22,'Sales Rep','2006-11-14',108,300000.00,186042.00);
commit;

---
---   OFFICE MANAGERS
---
UPDATE OFFICES SET MGR=108 WHERE OFFICE=22;
UPDATE OFFICES SET MGR=106 WHERE OFFICE=11;
UPDATE OFFICES SET MGR=104 WHERE OFFICE=12;
UPDATE OFFICES SET MGR=105 WHERE OFFICE=13;
UPDATE OFFICES SET MGR=108 WHERE OFFICE=21;
commit;

---
---   CUSTOMERS
---
INSERT INTO CUSTOMERS VALUES(2111,'JCP Inc.',103,50000.00);
INSERT INTO CUSTOMERS VALUES(2102,'First Corp.',101,65000.00);
INSERT INTO CUSTOMERS VALUES(2103,'Acme Mfg.',105,50000.00);
INSERT INTO CUSTOMERS VALUES(2123,'Carter \& Sons',102,40000.00);
INSERT INTO CUSTOMERS VALUES(2107,'Ace International',110,35000.00);
INSERT INTO CUSTOMERS VALUES(2115,'Smithson Corp.',101,20000.00);
INSERT INTO CUSTOMERS VALUES(2101,'Jones Mfg.',106,65000.00);
INSERT INTO CUSTOMERS VALUES(2112,'Zetacorp',108,50000.00);
INSERT INTO CUSTOMERS VALUES(2121,'QMA Assoc.',103,45000.00);
INSERT INTO CUSTOMERS VALUES(2114,'Orion Corp.',102,20000.00);
INSERT INTO CUSTOMERS VALUES(2124,'Peter Brothers',107,40000.00);
INSERT INTO CUSTOMERS VALUES(2108,'Holm \& Landis',109,55000.00);
INSERT INTO CUSTOMERS VALUES(2117,'J.P. Sinclair',106,35000.00);
INSERT INTO CUSTOMERS VALUES(2122,'Three Way Lines',105,30000.00);
INSERT INTO CUSTOMERS VALUES(2120,'Rico Enterprises',102,50000.00);
INSERT INTO CUSTOMERS VALUES(2106,'Fred Lewis Corp.',102,65000.00);
INSERT INTO CUSTOMERS VALUES(2119,'Solomon Inc.',109,25000.00);
INSERT INTO CUSTOMERS VALUES(2118,'Midwest Systems',108,60000.00);
INSERT INTO CUSTOMERS VALUES(2113,'Ian \& Schmidt',104,20000.00);
INSERT INTO CUSTOMERS VALUES(2109,'Chen Associates',103,25000.00);
INSERT INTO CUSTOMERS VALUES(2105,'AAA Investments',101,45000.00);
commit;

---
---  ORDERS
---
INSERT INTO ORDERS VALUES (112961,'2007-12-17',2117,106,'REI','2A44L',7,31500.00);
INSERT INTO ORDERS VALUES (113012,'2008-01-11',2111,105,'ACI','41003',35,3745.00);
INSERT INTO ORDERS VALUES (112989,'2008-01-03',2101,106,'FEA','114',6,1458.00);
INSERT INTO ORDERS VALUES (113051,'2008-02-10',2118,108,'QSA','XK47',4,1420.00);
INSERT INTO ORDERS VALUES (112968,'2007-10-12',2102,101,'ACI','41004',34,3978.00);
INSERT INTO ORDERS VALUES (113036,'2008-01-30',2107,110,'ACI','4100Z',9,22500.00);
INSERT INTO ORDERS VALUES (113045,'2008-02-02',2112,108,'REI','2A44R',10,45000.00);
INSERT INTO ORDERS VALUES (112963,'2007-12-17',2103,105,'ACI','41004',28,3276.00);
INSERT INTO ORDERS VALUES (113013,'2008-01-14',2118,108,'BIC','41003',1,652.00);
INSERT INTO ORDERS VALUES (113058,'2008-02-23',2108,109,'FEA','112',10,1480.00);
INSERT INTO ORDERS VALUES (112997,'2008-01-08',2124,107,'BIC','41003',1,652.00);
INSERT INTO ORDERS VALUES (112983,'2007-12-27',2103,105,'ACI','41004',6,702.00);
INSERT INTO ORDERS VALUES (113024,'2008-01-20',2114,108,'QSA','XK47',20,7100.00);
INSERT INTO ORDERS VALUES (113062,'2008-02-24',2124,107,'FEA','114',10,2430.00);
INSERT INTO ORDERS VALUES (112979,'2007-10-12',2114,102,'ACI','4100Z',6,15000.00);
INSERT INTO ORDERS VALUES (113027,'2008-01-22',2103,105,'ACI','41002',54,4104.00);
INSERT INTO ORDERS VALUES (113007,'2008-01-08',2112,108,'IMM','773C',3,2925.00);
INSERT INTO ORDERS VALUES (113069,'2008-03-02',2109,107,'IMM','775C',22,31350.00);
INSERT INTO ORDERS VALUES (113034,'2008-01-29',2107,110,'REI','2A45C',8,632.00);
INSERT INTO ORDERS VALUES (112992,'2007-11-04',2118,108,'ACI','41002',10,760.00);
INSERT INTO ORDERS VALUES (112975,'2007-10-12',2111,103,'REI','2A44G',6,2100.00);
INSERT INTO ORDERS VALUES (113055,'2008-02-15',2108,101,'ACI','4100X',6,150.00);
INSERT INTO ORDERS VALUES (113048,'2008-02-10',2120,102,'IMM','779C',2,3750.00);
INSERT INTO ORDERS VALUES (112993,'2007-01-04',2106,102,'REI','2A45C',24,1896.00);
INSERT INTO ORDERS VALUES (113065,'2008-02-27',2106,102,'QSA','XK47',6,2130.00);
INSERT INTO ORDERS VALUES (113003,'2008-01-25',2108,109,'IMM','779C',3,5625.00);
INSERT INTO ORDERS VALUES (113049,'2008-02-10',2118,108,'QSA','XK47',2,776.00);
INSERT INTO ORDERS VALUES (112987,'2007-12-31',2103,105,'ACI','4100Y',11,27500.00);
INSERT INTO ORDERS VALUES (113057,'2008-02-18',2111,103,'ACI','4100X',24,600.00);
INSERT INTO ORDERS VALUES (113042,'2008-02-20',2113,101,'REI','2A44R',5,22500.00);
commit;
\

SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

--31 доделать

CREATE OR REPLACE PROCEDURE ORDERS_FOR_CUSTOMER(
P_CUSTOMER IN VARCHAR2
)
IS
V_CUST_NUM CUSTOMERS.CUST_NUM%TYPE;
V_TOTAL_AMOUNT ORDERS.AMOUNT%TYPE := 0;
BEGIN
SELECT CUST_NUM INTO V_CUST_NUM FROM CUSTOMERS WHERE COMPANY = P_CUSTOMER;
IF V_CUST_NUM IS NULL THEN
DBMS_OUTPUT.PUT_LINE('Покупатель не найден.');
RETURN;
END IF;

FOR R_ORDER IN (
    SELECT * FROM ORDERS WHERE CUST = V_CUST_NUM
) LOOP
    DBMS_OUTPUT.PUT_LINE('Заказ '|| R_ORDER.ORDER_NUM || ' '|| R_ORDER.MFR || ' '|| R_ORDER.PRODUCT || ' '|| R_ORDER.QTY || ' ' || R_ORDER.AMOUNT);
    V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + R_ORDER.AMOUNT;
END LOOP;

DBMS_OUTPUT.PUT_LINE('Итоговая стоимость заказов для '|| P_CUSTOMER || ': '|| V_TOTAL_AMOUNT);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Ошибка: '|| SQLERRM);
END ORDERS_FOR_CUSTOMER;

EXECUTE ORDERS_FOR_CUSTOMER('First Corp.');

--32
CREATE OR REPLACE FUNCTION COUNT_ORDERS(p_namecompany CUSTOMERS.COMPANY%TYPE, start_date_period ORDERS.ORDER_DATE%TYPE, end_date_period ORDERS.ORDER_DATE%TYPE)
RETURN NUMBER
IS
    CUSTOMER_NUMBER ORDERS.CUST%TYPE;
    COUNT_ORDERS NUMBER;
BEGIN
    SELECT CUST_NUM INTO CUSTOMER_NUMBER FROM CUSTOMERS WHERE COMPANY = p_namecompany;
    SELECT COUNT(*) INTO COUNT_ORDERS FROM ORDERS WHERE CUST = CUSTOMER_NUMBER AND ORDER_DATE BETWEEN start_date_period AND end_date_period;
    RETURN COUNT_ORDERS;
END;

DECLARE
    COUNT_ORD NUMBER;
BEGIN
    COUNT_ORD := COUNT_ORDERS('Fred Lewis Corp.', '2000-02-23', '2023-02-23');
    DBMS_OUTPUT.PUT_LINE(COUNT_ORD);
END;

SELECT * FROM CUSTOMERS;
--33
CREATE OR REPLACE PROCEDURE LIST_PRODUCT(p_name_company IN CUSTOMERS.COMPANY%TYPE)
IS
BEGIN

END;


CREATE OR REPLACE PROCEDURE LIST_PRODUCTS(COMPANY_NAME CUSTOMERS.COMPANY%TYPE)
AS
    CUST_NUMBER ORDERS.CUST%TYPE;
BEGIN
    SELECT CUST_NUM
    INTO CUST_NUMBER
    FROM CUSTOMERS
    WHERE COMPANY = COMPANY_NAME;

    FOR PRODUCT_TYPE IN (
        SELECT MFR_ID, PRODUCT_ID, DESCRIPTION, PRICE, QTY_ON_HAND
        FROM PRODUCTS JOIN ORDERS
        ON PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT
        JOIN CUSTOMERS
        ON ORDERS.CUST = CUSTOMERS.CUST_NUM
        WHERE ORDERS.CUST = CUST_NUMBER AND
        PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT
        ORDER BY PRICE DESC
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE(PRODUCT_TYPE.MFR_ID||' 'PRODUCT_TYPE.PRODUCT_ID
        ' 'PRODUCT_TYPE.DESCRIPTION' 'PRODUCT_TYPE.PRICE' '||
        PRODUCT_TYPE.QTY_ON_HAND);
    END LOOP;
END;
/
EXEC LIST_PRODUCTS('Fred Lewis Corp.');

--36
SELECT * FROM ORDERS;

CREATE OR REPLACE FUNCTION COUNT_PRODUCT(p_date_start ORDERS.ORDER_DATE%TYPE, p_date_end ORDERS.ORDER_DATE%TYPE)
RETURN NUMBER
IS
    COUNT_PRODUCT NUMBER;
BEGIN
    SELECT COUNT(*) INTO COUNT_PRODUCT FROM ORDERS WHERE ORDER_DATE BETWEEN p_date_start AND p_date_end;
    RETURN COUNT_PRODUCT;
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RETURN NULL;
END;

DECLARE
    COUNTS NUMBER;
BEGIN
    COUNTS := COUNT_PRODUCT('03.01.08', '14.01.08');
    DBMS_OUTPUT.PUT_LINE('Количество заказанных товаров за определенный период составляет: ' || ' ' || COUNTS);
END;

--37
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

CREATE OR REPLACE PROCEDURE LIST_CUSTOMERS(p_date_start ORDERS.ORDER_DATE%TYPE, p_date_end ORDERS.ORDER_DATE%TYPE)
IS
BEGIN
    FOR LIST_CUST IN(SELECT CUST_NUM, COMPANY, CUST_REP, CREDIT_LIMIT FROM CUSTOMERS INNER JOIN ORDERS
                    ON CUSTOMERS.CUST_NUM = ORDERS.CUST WHERE ORDER_DATE BETWEEN p_date_start AND p_date_end)
    LOOP
        DBMS_OUTPUT.PUT_LINE('CUST_NUM = '|| LIST_CUST.CUST_NUM || ', COMPANY = '|| LIST_CUST.COMPANY || ', CUST_REP = '|| LIST_CUST.CUST_REP || ', CREDIT_LIMIT = '|| LIST_CUST.CREDIT_LIMIT);
    END LOOP;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Возникла ошибка:' || SQLERRM);
END;

EXECUTE LIST_CUSTOMERS('11.01.08', '22.01.08');

--38
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMERS;

CREATE OR REPLACE FUNCTION COUNT_CUSTOMERS(p_name_product ORDERS.PRODUCT%TYPE)
RETURN NUMBER
IS
    COUNT_CUST NUMBER;
BEGIN
    SELECT COUNT(*) INTO COUNT_CUST FROM CUSTOMERS INNER JOIN ORDERS
                                                    ON CUSTOMERS.CUST_NUM = ORDERS.CUST WHERE PRODUCT = p_name_product;
    RETURN COUNT_CUST;
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RETURN NULL;
END;

DECLARE
    COUNT_CUST NUMBER;
BEGIN
    COUNT_CUST := COUNT_CUSTOMERS('XK47');
    DBMS_OUTPUT.PUT_LINE('Количество покупателей определенного товара составляет: ' || ' ' ||COUNT_CUST);
END;

--39
SELECT * FROM PRODUCTS;

CREATE OR REPLACE PROCEDURE HIGH_SALE_PRODUCT(p_product_name PRODUCTS.PRODUCT_ID%TYPE)
AS 
BEGIN
    UPDATE PRODUCTS SET PRICE = PRICE * 0.1 WHERE PRODUCT_ID = p_product_name;
    EXCEPTION 
        WHEN NO_DATA_FOUND
            THEN DBMS_OUTPUT.PUT_LINE('Произошла ошибка!');
END;

EXECUTE HIGH_SALE_PRODUCT('4100Y');

--40
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMERS;

CREATE OR REPLACE FUNCTION COUNT_ORDERS(p_customer CUSTOMERS.COMPANY%TYPE, p_year_product IN NUMBER)
RETURN NUMBER
IS
    COUNT_ORDERS NUMBER;
    CUSTOMERS NUMBER;
BEGIN
    SELECT COMPANY INTO CUSTOMERS FROM CUSTOMERS WHERE COMPANY = p_customer;
    SELECT COUNT(*) INTO COUNT_ORDERS FROM ORDERS WHERE p_year_product = EXTRACT(YEAR FROM ORDER_DATE);
    
    RETURN COUNT_ORDERS;
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RETURN NULL;
END;

DECLARE
    COUNT_ORD NUMBER;
BEGIN
    COUNT_ORD := COUNT_ORDERS('Rico Enterprises', 2008);
    DBMS_OUTPUT.PUT_LINE(COUNT_ORD);
END;















--6
SELECT * FROM ORDERS;

CREATE OR REPLACE FUNCTION COUNT_ORDERS_PRODUCT(p_start_date IN ORDERS.ORDER_DATE%TYPE, p_end_date IN ORDERS.ORDER_DATE%TYPE)
RETURN NUMBER
IS
    COUNT_ORDERS NUMBER;
BEGIN
    SELECT COUNT(*) INTO COUNT_ORDERS FROM ORDERS WHERE ORDER_DATE BETWEEN p_start_date AND p_end_date;
    RETURN COUNT_ORDERS;
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN DBMS_OUTPUT.PUT_LINE('Не мого посчитать количество заказанных товаров!');
        WHEN OTHERS
            THEN RETURN NULL;
END;

DECLARE
    COUNT_ORDERS NUMBER;
BEGIN
    COUNT_ORDERS:= COUNT_ORDERS_PRODUCT('17.12.07', '08.01.08');
    DBMS_OUTPUT.PUT_LINE(COUNT_ORDERS);
END;

--7
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

CREATE OR REPLACE PROCEDURE LIST_CUSTOMERS(p_start_date IN ORDERS.ORDER_DATE%TYPE, p_end_date IN ORDERS.ORDER_DATE%TYPE)
IS
BEGIN
    FOR LIST_CUST IN (SELECT CUST_NUM, COMPANY, CUST_REP, CREDIT_LIMIT FROM CUSTOMERS INNER JOIN ORDERS
                                                                                ON CUSTOMERS.CUST_NUM = ORDERS.CUST WHERE ORDER_DATE BETWEEN p_start_date AND p_end_date)
    LOOP
       DBMS_OUTPUT.PUT_LINE('CUST_NUM = '|| LIST_CUST.CUST_NUM || ', COMPANY = '|| LIST_CUST.COMPANY || ', CUST_REP = '|| LIST_CUST.CUST_REP || ', CREDIT_LIMIT = '|| LIST_CUST.CREDIT_LIMIT);
    END LOOP;
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN DBMS_OUTPUT.PUT_LINE('Произошла ошибка!' || sqlerrm); 
END;

EXECUTE LIST_CUSTOMERS('17.12.07', '15.02.08');














